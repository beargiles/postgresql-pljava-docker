/*
 * This file is generated by jOOQ.
 */
package com.coyotesong.examples.pljava.persistence.jooq.generated.tables;


import com.coyotesong.examples.pljava.persistence.jooq.generated.Keys;
import com.coyotesong.examples.pljava.persistence.jooq.generated.Public;
import com.coyotesong.examples.pljava.persistence.jooq.generated.tables.records.DebBinaryRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class DebBinary extends TableImpl<DebBinaryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.deb_binary</code>
     */
    public static final DebBinary DEB_BINARY = new DebBinary();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DebBinaryRecord> getRecordType() {
        return DebBinaryRecord.class;
    }

    /**
     * The column <code>public.deb_binary.id</code>.
     */
    public final TableField<DebBinaryRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.deb_binary.apt_filename</code>.
     */
    public final TableField<DebBinaryRecord, String> APT_FILENAME = createField(DSL.name("apt_filename"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.deb_binary.architecture</code>.
     */
    public final TableField<DebBinaryRecord, String[]> ARCHITECTURE = createField(DSL.name("architecture"), SQLDataType.CLOB.array().nullable(false), this, "");

    /**
     * The column <code>public.deb_binary.date</code>.
     */
    public final TableField<DebBinaryRecord, String> DATE = createField(DSL.name("date"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.deb_binary.description</code>.
     */
    public final TableField<DebBinaryRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.deb_binary.filename</code>.
     */
    public final TableField<DebBinaryRecord, String> FILENAME = createField(DSL.name("filename"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.deb_binary.maintainer</code>.
     */
    public final TableField<DebBinaryRecord, String> MAINTAINER = createField(DSL.name("maintainer"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.deb_binary.package</code>.
     */
    public final TableField<DebBinaryRecord, String> PACKAGE = createField(DSL.name("package"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.deb_binary.size</code>.
     */
    public final TableField<DebBinaryRecord, Long> SIZE = createField(DSL.name("size"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.deb_binary.version</code>.
     */
    public final TableField<DebBinaryRecord, String> VERSION = createField(DSL.name("version"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.deb_binary.auto_built_package</code>.
     */
    public final TableField<DebBinaryRecord, String[]> AUTO_BUILT_PACKAGE = createField(DSL.name("auto_built_package"), SQLDataType.CLOB.array(), this, "");

    /**
     * The column <code>public.deb_binary.priority</code>.
     */
    public final TableField<DebBinaryRecord, String> PRIORITY = createField(DSL.name("priority"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.deb_binary.section</code>.
     */
    public final TableField<DebBinaryRecord, String> SECTION = createField(DSL.name("section"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.deb_binary.source</code>.
     */
    public final TableField<DebBinaryRecord, String> SOURCE = createField(DSL.name("source"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.deb_binary.homepage</code>.
     */
    public final TableField<DebBinaryRecord, String> HOMEPAGE = createField(DSL.name("homepage"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.deb_binary.build_essential</code>.
     */
    public final TableField<DebBinaryRecord, Boolean> BUILD_ESSENTIAL = createField(DSL.name("build_essential"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.deb_binary.essential</code>.
     */
    public final TableField<DebBinaryRecord, Boolean> ESSENTIAL = createField(DSL.name("essential"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.deb_binary.important</code>.
     */
    public final TableField<DebBinaryRecord, Boolean> IMPORTANT = createField(DSL.name("important"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.deb_binary.protected</code>.
     */
    public final TableField<DebBinaryRecord, String> PROTECTED = createField(DSL.name("protected"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.deb_binary.installed_size</code>.
     */
    public final TableField<DebBinaryRecord, String> INSTALLED_SIZE = createField(DSL.name("installed_size"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.deb_binary.origin</code>.
     */
    public final TableField<DebBinaryRecord, String> ORIGIN = createField(DSL.name("origin"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.deb_binary.download_size</code>.
     */
    public final TableField<DebBinaryRecord, String> DOWNLOAD_SIZE = createField(DSL.name("download_size"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.deb_binary.task</code>.
     */
    public final TableField<DebBinaryRecord, String[]> TASK = createField(DSL.name("task"), SQLDataType.CLOB.array(), this, "");

    /**
     * The column <code>public.deb_binary.breaks</code>.
     */
    public final TableField<DebBinaryRecord, String[]> BREAKS = createField(DSL.name("breaks"), SQLDataType.CLOB.array(), this, "");

    /**
     * The column <code>public.deb_binary.build_depends</code>.
     */
    public final TableField<DebBinaryRecord, String[]> BUILD_DEPENDS = createField(DSL.name("build_depends"), SQLDataType.CLOB.array(), this, "");

    /**
     * The column <code>public.deb_binary.conflicts</code>.
     */
    public final TableField<DebBinaryRecord, String[]> CONFLICTS = createField(DSL.name("conflicts"), SQLDataType.CLOB.array(), this, "");

    /**
     * The column <code>public.deb_binary.depends</code>.
     */
    public final TableField<DebBinaryRecord, String[]> DEPENDS = createField(DSL.name("depends"), SQLDataType.CLOB.array(), this, "");

    /**
     * The column <code>public.deb_binary.enhances</code>.
     */
    public final TableField<DebBinaryRecord, String[]> ENHANCES = createField(DSL.name("enhances"), SQLDataType.CLOB.array(), this, "");

    /**
     * The column <code>public.deb_binary.pre_depends</code>.
     */
    public final TableField<DebBinaryRecord, String[]> PRE_DEPENDS = createField(DSL.name("pre_depends"), SQLDataType.CLOB.array(), this, "");

    /**
     * The column <code>public.deb_binary.provides</code>.
     */
    public final TableField<DebBinaryRecord, String[]> PROVIDES = createField(DSL.name("provides"), SQLDataType.CLOB.array(), this, "");

    /**
     * The column <code>public.deb_binary.recommends</code>.
     */
    public final TableField<DebBinaryRecord, String[]> RECOMMENDS = createField(DSL.name("recommends"), SQLDataType.CLOB.array(), this, "");

    /**
     * The column <code>public.deb_binary.replaces</code>.
     */
    public final TableField<DebBinaryRecord, String[]> REPLACES = createField(DSL.name("replaces"), SQLDataType.CLOB.array(), this, "");

    /**
     * The column <code>public.deb_binary.suggests</code>.
     */
    public final TableField<DebBinaryRecord, String[]> SUGGESTS = createField(DSL.name("suggests"), SQLDataType.CLOB.array(), this, "");

    /**
     * The column <code>public.deb_binary.bugs</code>.
     */
    public final TableField<DebBinaryRecord, String> BUGS = createField(DSL.name("bugs"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.deb_binary.package_type</code>.
     */
    public final TableField<DebBinaryRecord, String> PACKAGE_TYPE = createField(DSL.name("package_type"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.deb_binary.build_ids</code>.
     */
    public final TableField<DebBinaryRecord, String[]> BUILD_IDS = createField(DSL.name("build_ids"), SQLDataType.CLOB.array(), this, "");

    /**
     * The column <code>public.deb_binary.built_using</code>.
     */
    public final TableField<DebBinaryRecord, String[]> BUILT_USING = createField(DSL.name("built_using"), SQLDataType.CLOB.array(), this, "");

    /**
     * The column <code>public.deb_binary.description_md5</code>.
     */
    public final TableField<DebBinaryRecord, String> DESCRIPTION_MD5 = createField(DSL.name("description_md5"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.deb_binary.efi_vendor</code>.
     */
    public final TableField<DebBinaryRecord, String> EFI_VENDOR = createField(DSL.name("efi_vendor"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.deb_binary.go_import_path</code>.
     */
    public final TableField<DebBinaryRecord, String[]> GO_IMPORT_PATH = createField(DSL.name("go_import_path"), SQLDataType.CLOB.array(), this, "");

    /**
     * The column <code>public.deb_binary.license</code>.
     */
    public final TableField<DebBinaryRecord, String> LICENSE = createField(DSL.name("license"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.deb_binary.multi_arch</code>.
     */
    public final TableField<DebBinaryRecord, String> MULTI_ARCH = createField(DSL.name("multi_arch"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.deb_binary.original_maintainer</code>.
     */
    public final TableField<DebBinaryRecord, String> ORIGINAL_MAINTAINER = createField(DSL.name("original_maintainer"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.deb_binary.python_egg_name</code>.
     */
    public final TableField<DebBinaryRecord, String> PYTHON_EGG_NAME = createField(DSL.name("python_egg_name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.deb_binary.python_version</code>.
     */
    public final TableField<DebBinaryRecord, String> PYTHON_VERSION = createField(DSL.name("python_version"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.deb_binary.ruby_versions</code>.
     */
    public final TableField<DebBinaryRecord, String> RUBY_VERSIONS = createField(DSL.name("ruby_versions"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.deb_binary.support</code>.
     */
    public final TableField<DebBinaryRecord, String> SUPPORT = createField(DSL.name("support"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.deb_binary.vendor</code>.
     */
    public final TableField<DebBinaryRecord, String> VENDOR = createField(DSL.name("vendor"), SQLDataType.CLOB, this, "");

    private DebBinary(Name alias, Table<DebBinaryRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private DebBinary(Name alias, Table<DebBinaryRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.deb_binary</code> table reference
     */
    public DebBinary(String alias) {
        this(DSL.name(alias), DEB_BINARY);
    }

    /**
     * Create an aliased <code>public.deb_binary</code> table reference
     */
    public DebBinary(Name alias) {
        this(alias, DEB_BINARY);
    }

    /**
     * Create a <code>public.deb_binary</code> table reference
     */
    public DebBinary() {
        this(DSL.name("deb_binary"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<DebBinaryRecord, Integer> getIdentity() {
        return (Identity<DebBinaryRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<DebBinaryRecord> getPrimaryKey() {
        return Keys.DEB_BINARY_KEY;
    }

    @Override
    public DebBinary as(String alias) {
        return new DebBinary(DSL.name(alias), this);
    }

    @Override
    public DebBinary as(Name alias) {
        return new DebBinary(alias, this);
    }

    @Override
    public DebBinary as(Table<?> alias) {
        return new DebBinary(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public DebBinary rename(String name) {
        return new DebBinary(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DebBinary rename(Name name) {
        return new DebBinary(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public DebBinary rename(Table<?> name) {
        return new DebBinary(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DebBinary where(Condition condition) {
        return new DebBinary(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DebBinary where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DebBinary where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DebBinary where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DebBinary where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DebBinary where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DebBinary where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DebBinary where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DebBinary whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DebBinary whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
