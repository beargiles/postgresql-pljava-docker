/*
 * This file is generated by jOOQ.
 */
package com.coyotesong.examples.pljava.persistence.jooq.generated.tables;


import com.coyotesong.examples.pljava.persistence.jooq.generated.Keys;
import com.coyotesong.examples.pljava.persistence.jooq.generated.Public;
import com.coyotesong.examples.pljava.persistence.jooq.generated.tables.records.DebStatusRecord;

import java.time.OffsetDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class DebStatus extends TableImpl<DebStatusRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.deb_status</code>
     */
    public static final DebStatus DEB_STATUS = new DebStatus();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DebStatusRecord> getRecordType() {
        return DebStatusRecord.class;
    }

    /**
     * The column <code>public.deb_status.id</code>.
     */
    public final TableField<DebStatusRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.deb_status.apt_filename</code>.
     */
    public final TableField<DebStatusRecord, String> APT_FILENAME = createField(DSL.name("apt_filename"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.deb_status.host</code>.
     */
    public final TableField<DebStatusRecord, String> HOST = createField(DSL.name("host"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.deb_status.hostname</code>.
     */
    public final TableField<DebStatusRecord, String> HOSTNAME = createField(DSL.name("hostname"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.deb_status.ts</code>.
     */
    public final TableField<DebStatusRecord, OffsetDateTime> TS = createField(DSL.name("ts"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.deb_status.status</code>.
     */
    public final TableField<DebStatusRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.deb_status.architecture</code>.
     */
    public final TableField<DebStatusRecord, String> ARCHITECTURE = createField(DSL.name("architecture"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.deb_status.description</code>.
     */
    public final TableField<DebStatusRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.deb_status.maintainer</code>.
     */
    public final TableField<DebStatusRecord, String> MAINTAINER = createField(DSL.name("maintainer"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.deb_status.package</code>.
     */
    public final TableField<DebStatusRecord, String> PACKAGE = createField(DSL.name("package"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.deb_status.version</code>.
     */
    public final TableField<DebStatusRecord, String> VERSION = createField(DSL.name("version"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.deb_status.priority</code>.
     */
    public final TableField<DebStatusRecord, String> PRIORITY = createField(DSL.name("priority"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.deb_status.section</code>.
     */
    public final TableField<DebStatusRecord, String> SECTION = createField(DSL.name("section"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.deb_status.source</code>.
     */
    public final TableField<DebStatusRecord, String> SOURCE = createField(DSL.name("source"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.deb_status.homepage</code>.
     */
    public final TableField<DebStatusRecord, String> HOMEPAGE = createField(DSL.name("homepage"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.deb_status.essential</code>.
     */
    public final TableField<DebStatusRecord, Boolean> ESSENTIAL = createField(DSL.name("essential"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.deb_status.important</code>.
     */
    public final TableField<DebStatusRecord, Boolean> IMPORTANT = createField(DSL.name("important"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.deb_status.protected</code>.
     */
    public final TableField<DebStatusRecord, Boolean> PROTECTED = createField(DSL.name("protected"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.deb_status.installed_size</code>.
     */
    public final TableField<DebStatusRecord, Long> INSTALLED_SIZE = createField(DSL.name("installed_size"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.deb_status.download_size</code>.
     */
    public final TableField<DebStatusRecord, String> DOWNLOAD_SIZE = createField(DSL.name("download_size"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.deb_status.breaks</code>.
     */
    public final TableField<DebStatusRecord, String> BREAKS = createField(DSL.name("breaks"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.deb_status.build_depends</code>.
     */
    public final TableField<DebStatusRecord, String> BUILD_DEPENDS = createField(DSL.name("build_depends"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.deb_status.conflicts</code>.
     */
    public final TableField<DebStatusRecord, String> CONFLICTS = createField(DSL.name("conflicts"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.deb_status.depends</code>.
     */
    public final TableField<DebStatusRecord, String> DEPENDS = createField(DSL.name("depends"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.deb_status.enhances</code>.
     */
    public final TableField<DebStatusRecord, String> ENHANCES = createField(DSL.name("enhances"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.deb_status.pre_depends</code>.
     */
    public final TableField<DebStatusRecord, String> PRE_DEPENDS = createField(DSL.name("pre_depends"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.deb_status.provides</code>.
     */
    public final TableField<DebStatusRecord, String> PROVIDES = createField(DSL.name("provides"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.deb_status.recommends</code>.
     */
    public final TableField<DebStatusRecord, String> RECOMMENDS = createField(DSL.name("recommends"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.deb_status.replaces</code>.
     */
    public final TableField<DebStatusRecord, String> REPLACES = createField(DSL.name("replaces"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.deb_status.suggests</code>.
     */
    public final TableField<DebStatusRecord, String> SUGGESTS = createField(DSL.name("suggests"), SQLDataType.CLOB, this, "");

    private DebStatus(Name alias, Table<DebStatusRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private DebStatus(Name alias, Table<DebStatusRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.deb_status</code> table reference
     */
    public DebStatus(String alias) {
        this(DSL.name(alias), DEB_STATUS);
    }

    /**
     * Create an aliased <code>public.deb_status</code> table reference
     */
    public DebStatus(Name alias) {
        this(alias, DEB_STATUS);
    }

    /**
     * Create a <code>public.deb_status</code> table reference
     */
    public DebStatus() {
        this(DSL.name("deb_status"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<DebStatusRecord, Integer> getIdentity() {
        return (Identity<DebStatusRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<DebStatusRecord> getPrimaryKey() {
        return Keys.DEB_STATUS_PKEY;
    }

    @Override
    public DebStatus as(String alias) {
        return new DebStatus(DSL.name(alias), this);
    }

    @Override
    public DebStatus as(Name alias) {
        return new DebStatus(alias, this);
    }

    @Override
    public DebStatus as(Table<?> alias) {
        return new DebStatus(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public DebStatus rename(String name) {
        return new DebStatus(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DebStatus rename(Name name) {
        return new DebStatus(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public DebStatus rename(Table<?> name) {
        return new DebStatus(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DebStatus where(Condition condition) {
        return new DebStatus(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DebStatus where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DebStatus where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DebStatus where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DebStatus where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DebStatus where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DebStatus where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DebStatus where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DebStatus whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DebStatus whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
