/*
 * This file is generated by jOOQ.
 */
package com.coyotesong.examples.pljava.persistence.jooq.generated.tables;


import com.coyotesong.examples.pljava.persistence.jooq.generated.Keys;
import com.coyotesong.examples.pljava.persistence.jooq.generated.Public;
import com.coyotesong.examples.pljava.persistence.jooq.generated.tables.records.DebSourceRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class DebSource extends TableImpl<DebSourceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.deb_source</code>
     */
    public static final DebSource DEB_SOURCE = new DebSource();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DebSourceRecord> getRecordType() {
        return DebSourceRecord.class;
    }

    /**
     * The column <code>public.deb_source.id</code>.
     */
    public final TableField<DebSourceRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.deb_source.apt_filename</code>.
     */
    public final TableField<DebSourceRecord, String> APT_FILENAME = createField(DSL.name("apt_filename"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.deb_source.architectures</code>.
     */
    public final TableField<DebSourceRecord, String[]> ARCHITECTURES = createField(DSL.name("architectures"), SQLDataType.CLOB.array().nullable(false), this, "");

    /**
     * The column <code>public.deb_source.binaries</code>.
     */
    public final TableField<DebSourceRecord, String[]> BINARIES = createField(DSL.name("binaries"), SQLDataType.CLOB.array().nullable(false), this, "");

    /**
     * The column <code>public.deb_source.date</code>.
     */
    public final TableField<DebSourceRecord, String> DATE = createField(DSL.name("date"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.deb_source.directory</code>.
     */
    public final TableField<DebSourceRecord, String> DIRECTORY = createField(DSL.name("directory"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.deb_source.format</code>.
     */
    public final TableField<DebSourceRecord, String> FORMAT = createField(DSL.name("format"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.deb_source.maintainer</code>.
     */
    public final TableField<DebSourceRecord, String> MAINTAINER = createField(DSL.name("maintainer"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.deb_source.package</code>.
     */
    public final TableField<DebSourceRecord, String> PACKAGE = createField(DSL.name("package"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.deb_source.section</code>.
     */
    public final TableField<DebSourceRecord, String> SECTION = createField(DSL.name("section"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.deb_source.version</code>.
     */
    public final TableField<DebSourceRecord, String> VERSION = createField(DSL.name("version"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.deb_source.description</code>.
     */
    public final TableField<DebSourceRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.deb_source.homepage</code>.
     */
    public final TableField<DebSourceRecord, String> HOMEPAGE = createField(DSL.name("homepage"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.deb_source.priority</code>.
     */
    public final TableField<DebSourceRecord, String> PRIORITY = createField(DSL.name("priority"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.deb_source.autobuild</code>.
     */
    public final TableField<DebSourceRecord, Boolean> AUTOBUILD = createField(DSL.name("autobuild"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.deb_source.build_conflicts</code>.
     */
    public final TableField<DebSourceRecord, String[]> BUILD_CONFLICTS = createField(DSL.name("build_conflicts"), SQLDataType.CLOB.array(), this, "");

    /**
     * The column <code>public.deb_source.build_conflicts_indep</code>.
     */
    public final TableField<DebSourceRecord, String[]> BUILD_CONFLICTS_INDEP = createField(DSL.name("build_conflicts_indep"), SQLDataType.CLOB.array(), this, "");

    /**
     * The column <code>public.deb_source.build_depends</code>.
     */
    public final TableField<DebSourceRecord, String[]> BUILD_DEPENDS = createField(DSL.name("build_depends"), SQLDataType.CLOB.array(), this, "");

    /**
     * The column <code>public.deb_source.build_depends_arch</code>.
     */
    public final TableField<DebSourceRecord, String[]> BUILD_DEPENDS_ARCH = createField(DSL.name("build_depends_arch"), SQLDataType.CLOB.array(), this, "");

    /**
     * The column <code>public.deb_source.build_depends_indep</code>.
     */
    public final TableField<DebSourceRecord, String[]> BUILD_DEPENDS_INDEP = createField(DSL.name("build_depends_indep"), SQLDataType.CLOB.array(), this, "");

    /**
     * The column <code>public.deb_source.build_indep_architecture</code>.
     */
    public final TableField<DebSourceRecord, String[]> BUILD_INDEP_ARCHITECTURE = createField(DSL.name("build_indep_architecture"), SQLDataType.CLOB.array(), this, "");

    /**
     * The column <code>public.deb_source.go_import_path</code>.
     */
    public final TableField<DebSourceRecord, String[]> GO_IMPORT_PATH = createField(DSL.name("go_import_path"), SQLDataType.CLOB.array(), this, "");

    /**
     * The column <code>public.deb_source.original_maintainer</code>.
     */
    public final TableField<DebSourceRecord, String> ORIGINAL_MAINTAINER = createField(DSL.name("original_maintainer"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.deb_source.python_version</code>.
     */
    public final TableField<DebSourceRecord, String> PYTHON_VERSION = createField(DSL.name("python_version"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.deb_source.ruby_versions</code>.
     */
    public final TableField<DebSourceRecord, String> RUBY_VERSIONS = createField(DSL.name("ruby_versions"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.deb_source.standards_version</code>.
     */
    public final TableField<DebSourceRecord, String> STANDARDS_VERSION = createField(DSL.name("standards_version"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.deb_source.testsuite</code>.
     */
    public final TableField<DebSourceRecord, String[]> TESTSUITE = createField(DSL.name("testsuite"), SQLDataType.CLOB.array(), this, "");

    /**
     * The column <code>public.deb_source.ubuntu_nvidia_dependencies</code>.
     */
    public final TableField<DebSourceRecord, String[]> UBUNTU_NVIDIA_DEPENDENCIES = createField(DSL.name("ubuntu_nvidia_dependencies"), SQLDataType.CLOB.array(), this, "");

    /**
     * The column <code>public.deb_source.uploaders</code>.
     */
    public final TableField<DebSourceRecord, String> UPLOADERS = createField(DSL.name("uploaders"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.deb_source.vcs_browser</code>.
     */
    public final TableField<DebSourceRecord, String> VCS_BROWSER = createField(DSL.name("vcs_browser"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.deb_source.vcs_bzr</code>.
     */
    public final TableField<DebSourceRecord, String> VCS_BZR = createField(DSL.name("vcs_bzr"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.deb_source.vcs_cvs</code>.
     */
    public final TableField<DebSourceRecord, String> VCS_CVS = createField(DSL.name("vcs_cvs"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.deb_source.vcs_git</code>.
     */
    public final TableField<DebSourceRecord, String> VCS_GIT = createField(DSL.name("vcs_git"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.deb_source.vcs_svn</code>.
     */
    public final TableField<DebSourceRecord, String> VCS_SVN = createField(DSL.name("vcs_svn"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.deb_source.vendored_sources_rust</code>.
     */
    public final TableField<DebSourceRecord, String[]> VENDORED_SOURCES_RUST = createField(DSL.name("vendored_sources_rust"), SQLDataType.CLOB.array(), this, "");

    private DebSource(Name alias, Table<DebSourceRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private DebSource(Name alias, Table<DebSourceRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.deb_source</code> table reference
     */
    public DebSource(String alias) {
        this(DSL.name(alias), DEB_SOURCE);
    }

    /**
     * Create an aliased <code>public.deb_source</code> table reference
     */
    public DebSource(Name alias) {
        this(alias, DEB_SOURCE);
    }

    /**
     * Create a <code>public.deb_source</code> table reference
     */
    public DebSource() {
        this(DSL.name("deb_source"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<DebSourceRecord, Integer> getIdentity() {
        return (Identity<DebSourceRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<DebSourceRecord> getPrimaryKey() {
        return Keys.DEB_SOURCE_PKEY;
    }

    @Override
    public DebSource as(String alias) {
        return new DebSource(DSL.name(alias), this);
    }

    @Override
    public DebSource as(Name alias) {
        return new DebSource(alias, this);
    }

    @Override
    public DebSource as(Table<?> alias) {
        return new DebSource(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public DebSource rename(String name) {
        return new DebSource(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DebSource rename(Name name) {
        return new DebSource(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public DebSource rename(Table<?> name) {
        return new DebSource(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DebSource where(Condition condition) {
        return new DebSource(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DebSource where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DebSource where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DebSource where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DebSource where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DebSource where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DebSource where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DebSource where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DebSource whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DebSource whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
