/*
 * This file is generated by jOOQ.
 */
package com.coyotesong.examples.pljava.persistence.jooq.generated.tables;


import com.coyotesong.examples.pljava.persistence.jooq.generated.Keys;
import com.coyotesong.examples.pljava.persistence.jooq.generated.Public;
import com.coyotesong.examples.pljava.persistence.jooq.generated.tables.records.DebReleaseRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class DebRelease extends TableImpl<DebReleaseRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.deb_release</code>
     */
    public static final DebRelease DEB_RELEASE = new DebRelease();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DebReleaseRecord> getRecordType() {
        return DebReleaseRecord.class;
    }

    /**
     * The column <code>public.deb_release.id</code>.
     */
    public final TableField<DebReleaseRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.deb_release.apt_filename</code>.
     */
    public final TableField<DebReleaseRecord, String> APT_FILENAME = createField(DSL.name("apt_filename"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.deb_release.architectures</code>.
     */
    public final TableField<DebReleaseRecord, String[]> ARCHITECTURES = createField(DSL.name("architectures"), SQLDataType.CLOB.array().nullable(false), this, "");

    /**
     * The column <code>public.deb_release.components</code>.
     */
    public final TableField<DebReleaseRecord, String[]> COMPONENTS = createField(DSL.name("components"), SQLDataType.CLOB.array().nullable(false), this, "");

    /**
     * The column <code>public.deb_release.date</code>.
     */
    public final TableField<DebReleaseRecord, String> DATE = createField(DSL.name("date"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.deb_release.label</code>.
     */
    public final TableField<DebReleaseRecord, String> LABEL = createField(DSL.name("label"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.deb_release.origin</code>.
     */
    public final TableField<DebReleaseRecord, String> ORIGIN = createField(DSL.name("origin"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.deb_release.suite</code>.
     */
    public final TableField<DebReleaseRecord, String> SUITE = createField(DSL.name("suite"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.deb_release.codename</code>.
     */
    public final TableField<DebReleaseRecord, String> CODENAME = createField(DSL.name("codename"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.deb_release.description</code>.
     */
    public final TableField<DebReleaseRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.deb_release.version</code>.
     */
    public final TableField<DebReleaseRecord, String> VERSION = createField(DSL.name("version"), SQLDataType.CLOB, this, "");

    private DebRelease(Name alias, Table<DebReleaseRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private DebRelease(Name alias, Table<DebReleaseRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.deb_release</code> table reference
     */
    public DebRelease(String alias) {
        this(DSL.name(alias), DEB_RELEASE);
    }

    /**
     * Create an aliased <code>public.deb_release</code> table reference
     */
    public DebRelease(Name alias) {
        this(alias, DEB_RELEASE);
    }

    /**
     * Create a <code>public.deb_release</code> table reference
     */
    public DebRelease() {
        this(DSL.name("deb_release"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<DebReleaseRecord, Integer> getIdentity() {
        return (Identity<DebReleaseRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<DebReleaseRecord> getPrimaryKey() {
        return Keys.DEB_RELEASE_PKEY;
    }

    @Override
    public DebRelease as(String alias) {
        return new DebRelease(DSL.name(alias), this);
    }

    @Override
    public DebRelease as(Name alias) {
        return new DebRelease(alias, this);
    }

    @Override
    public DebRelease as(Table<?> alias) {
        return new DebRelease(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public DebRelease rename(String name) {
        return new DebRelease(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DebRelease rename(Name name) {
        return new DebRelease(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public DebRelease rename(Table<?> name) {
        return new DebRelease(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DebRelease where(Condition condition) {
        return new DebRelease(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DebRelease where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DebRelease where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DebRelease where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DebRelease where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DebRelease where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DebRelease where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DebRelease where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DebRelease whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DebRelease whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
