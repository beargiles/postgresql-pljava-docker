/*
 * This file is generated by jOOQ.
 */
package com.coyotesong.examples.pljava.persistence.jooq.generated.tables;


import com.coyotesong.examples.pljava.persistence.jooq.generated.Keys;
import com.coyotesong.examples.pljava.persistence.jooq.generated.Public;
import com.coyotesong.examples.pljava.persistence.jooq.generated.tables.records.DebPackageInfoRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class DebPackageInfo extends TableImpl<DebPackageInfoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.deb_package_info</code>
     */
    public static final DebPackageInfo DEB_PACKAGE_INFO = new DebPackageInfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DebPackageInfoRecord> getRecordType() {
        return DebPackageInfoRecord.class;
    }

    /**
     * The column <code>public.deb_package_info.id</code>.
     */
    public final TableField<DebPackageInfoRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.deb_package_info.package</code>.
     */
    public final TableField<DebPackageInfoRecord, String> PACKAGE = createField(DSL.name("package"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.deb_package_info.format</code>.
     */
    public final TableField<DebPackageInfoRecord, String> FORMAT = createField(DSL.name("format"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.deb_package_info.category</code>.
     */
    public final TableField<DebPackageInfoRecord, String> CATEGORY = createField(DSL.name("category"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.deb_package_info.section</code>.
     */
    public final TableField<DebPackageInfoRecord, String> SECTION = createField(DSL.name("section"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.deb_package_info.priority</code>.
     */
    public final TableField<DebPackageInfoRecord, String> PRIORITY = createField(DSL.name("priority"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.deb_package_info.architecture</code>.
     */
    public final TableField<DebPackageInfoRecord, String> ARCHITECTURE = createField(DSL.name("architecture"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.deb_package_info.profile</code>.
     */
    public final TableField<DebPackageInfoRecord, String> PROFILE = createField(DSL.name("profile"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.deb_package_info.essential</code>.
     */
    public final TableField<DebPackageInfoRecord, Boolean> ESSENTIAL = createField(DSL.name("essential"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.deb_package_info.protected</code>.
     */
    public final TableField<DebPackageInfoRecord, Boolean> PROTECTED = createField(DSL.name("protected"), SQLDataType.BOOLEAN, this, "");

    private DebPackageInfo(Name alias, Table<DebPackageInfoRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private DebPackageInfo(Name alias, Table<DebPackageInfoRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.deb_package_info</code> table reference
     */
    public DebPackageInfo(String alias) {
        this(DSL.name(alias), DEB_PACKAGE_INFO);
    }

    /**
     * Create an aliased <code>public.deb_package_info</code> table reference
     */
    public DebPackageInfo(Name alias) {
        this(alias, DEB_PACKAGE_INFO);
    }

    /**
     * Create a <code>public.deb_package_info</code> table reference
     */
    public DebPackageInfo() {
        this(DSL.name("deb_package_info"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<DebPackageInfoRecord, Integer> getIdentity() {
        return (Identity<DebPackageInfoRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<DebPackageInfoRecord> getPrimaryKey() {
        return Keys.DEB_PACKAGE_INFO_PKEY;
    }

    @Override
    public DebPackageInfo as(String alias) {
        return new DebPackageInfo(DSL.name(alias), this);
    }

    @Override
    public DebPackageInfo as(Name alias) {
        return new DebPackageInfo(alias, this);
    }

    @Override
    public DebPackageInfo as(Table<?> alias) {
        return new DebPackageInfo(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public DebPackageInfo rename(String name) {
        return new DebPackageInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DebPackageInfo rename(Name name) {
        return new DebPackageInfo(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public DebPackageInfo rename(Table<?> name) {
        return new DebPackageInfo(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DebPackageInfo where(Condition condition) {
        return new DebPackageInfo(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DebPackageInfo where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DebPackageInfo where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DebPackageInfo where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DebPackageInfo where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DebPackageInfo where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DebPackageInfo where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DebPackageInfo where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DebPackageInfo whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DebPackageInfo whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
